<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="f2bSection" type="F2B.F2BSection, F2BLogAnalyzer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>

  <!-- System.Runtime.Caching.MemoryCache configuration (commented out to use default values) -->
  <!--
  <namedCaches>
    <add Name="CachedAccount[ad_accounts]" CacheMemoryLimitMegabytes="0"/>
  </namedCaches>
  -->

  <!-- Fail2ban configuratin section -->
  <!-- configuration can be specified directly here or it can be included from external file using
    <f2bSection configSource="f2b.config"/>
  -->
  <f2bSection>

    <!-- Fail2ban event inputs

    default input attributes
      * name ... unique input name
      * type ... input type (input class name)
    
    supported input types:
      * windows event log (local or remote)
      * application log files with all information on one line parsed by regex

    To subscribe windows event log (espetially Security log) special privileges
    are required. LocalSystem service account has by default sufficient rights
    or F2BLA service can be executed under arbitrary user account that satisfy
    one of folowing conditions
      * service user is member of "Event Log Readers" group
      * special ACL was applied to event log (LOG_NAME can be e.g. Security, Application, ...)
        wevtutil gl "LOG_NAME"
        wevtutil sl "LOG_NAME" /ca:"original SDDL"(A;;0x3;;;"user SID")

    usage:
      * subscribe to local event log
        <input name="local_eventlog" type="EventLog"/>
      * subscribe to event log on given machine with service credentials
        <input name="remote_eventlog" type="EventLog" server="win1.example.com"/>
      * subscribe to event log on given machine with custom credentials
        <input name="remote_eventlog_auth" type="EventLog" server="win1.example.com"
               domain="EXAMPLE.COM" username="username" password="secret"/>
      * subscribe to changes in local log file
        <input name="apache" type="FileLog" logpath="c:\apache\log\access_log"/>
    -->
    <inputs>
      <input name="local_eventlog" type="EventLog"/>
    </inputs>

    <!-- Event log selectors are used to filter interesting events that we want
    to treat later with F2B processors. Selectors are also used to extract basic
    data from log message. For each input name or type selector configuration
    can require different configuration options.

    default selector attributes
      * name ........ unique selector name
      * input_name .. event input name (input_name or input type must be defined)
      * input_type .. event input type (input_name or input type must be defined)
      * login ....... optional event kind unknown, success, fail
                      (default: unknown, autodetected for eventlog using keyword)
      * processor ... processor name used for selected events
                      (default: first processor defined in `<processors>` section)
    
    EventLog selector configuration (input_type="EventLog"):
      Selector query is required configuration option and it is used by log API
      (see https://msdn.microsoft.com/en-us/library/bb399427%28v=VS.90%29.aspx).
      You can use mmc Event Viewer snap-in to visually build required query with
      help of "Create Vustom View" -> "Define your filter" -> "XML".

      Client IP address, port, username and domain can be extracted from eventlog
      data using XPath + regex. Definition for IP address is required and must
      match valid IPv4/IPv6 address.

    Flat log file configuration (input_type="FileLog"):
      List of regular expressions are used to match log lines and extract required
      data (e.g. IP address). There are several types of regular expression
        ignore ... matched line is completely ignored
        fail ..... matched line means login failure
        success .. matched line means login success
    -->
    <!-- List of globally defined EventLog keywords
    (System.Diagnostics.Eventing.Reader.StandardEventKeywords)
    Member Name        | Hex              | Decimal
    ===================+==================+======================
    AuditFailure       | 0x10000000000000 | 4503599627370496
    AuditSuccess       | 0x20000000000000 | 9007199254740992
    CorrelationHint    | 0x10000000000000 | 4503599627370496
    CorrelationHint2   | 0x40000000000000 | 18014398509481984
    EventLogClassic    | 0x80000000000000 | 36028797018963968
    None               | 0x00000000000000 | 0
    ResponseTime       | 0x01000000000000 | 281474976710656
    Sqm                | 0x08000000000000 | 2251799813685248
    WdiContext         | 0x02000000000000 | 562949953421312
    WdiDiagnostic      | 0x04000000000000 | 1125899906842624
    -->
    <selectors>

      <!-- Test selector for eventlog data produced by LogEvents.exe -->
      <selector name="test" input_type="EventLog" processor="first">
        <query><![CDATA[<Select Path="Application">*[System[(Provider/@Name='F2B test log event') and (EventID=1)]]</Select>]]></query>
        <address xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></address>
        <port xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></port>
        <username xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></username>
      </selector>

      <!-- All audit failures
      Events selected from Security log using Keywords attribute 0x30000000000000
      (audit failure + success). These events include e.g. Kerberos tgt requests,
      failed logins to Windows, ... If we want to ignore Kerberos failures except
      "bad password" it is possible to discard messages using "Supress" element.
      -->
      <selector name="login" input_type="EventLog">
        <query>
          <![CDATA[
            <Select Path="Security">*[System[(band(Keywords,13510798882111488))]]</Select>
            <Suppress Path="Security">
              (*[System[(EventID='4768')]] or *[System[(EventID='4771')]])
              and
              (*[EventData[Data[@Name='Status']!='0x6']] and *[EventData[Data[@Name='Status']!='0x18']])
            </Suppress>
          ]]>
        </query>
        <!-- Select event XML element with XPath and use its text content -->
        <address xpath="Event/EventData/Data[@Name='IpAddress']"/>
        <port xpath="Event/EventData/Data[@Name='IpPort']"/>
        <username xpath="Event/EventData/Data[@Name='TargetUserName']"/>
        <domain xpath="Event/EventData/Data[@Name='TargetDomainName']"/>
        <!-- Regex with named groups can be used to parse data from complex text log data
        <address xpath="Event/EventData/Data[@Name='IpAddress']"><![CDATA[(?<address>.+)]]></address>
        <port xpath="Event/EventData/Data[@Name='IpPort']"><![CDATA[(?<port>.+)]]></port>
        <username xpath="Event/EventData/Data[@Name='TargetUserName']"><![CDATA[(?<username>.+)]]></username>
        <domain xpath="Event/EventData/Data[@Name='TargetDomainName']"><![CDATA[(?<domain>.+)]]></domain>
        -->
      </selector>

      <!-- Audit success (Keywords=0x8020000000000000) from login attempts to Windows -->
      <selector name="login_success" input_type="EventLog" login="success">
        <!-- (Keywords == 0x8000000000000000 and Keywords == 0x0020000000000000) -->
        <query><![CDATA[
            <Select Path="Security">
                *[System[(band(Keywords,9223372036854775808))]]
                and
                *[System[(band(Keywords,9007199254740992))]]
            </Select>
        ]]></query>
        <!-- example how to create more complex eventlog query
        <query><![CDATA[
                 <Select Path="Security">
                   *[EventData[Data[@Name='SubjectUserName'] and (Data='username1' or Data='username2')]]
                   and
                   (*[System[(EventID='4624')]] or *[System[(EventID='4648')]])
                   and
                   *[System[(EventID='4648')]]
                   and
                   *[System[(band(Keywords,9232379236109516800))]]
                 </Select>
                 <Suppress Path="Security">*[System/Provider/@Name="F2B"]</Suppress>
        ]]></query>
        -->
        <address xpath="Event/EventData/Data[@Name='IpAddress']"/>
        <port xpath="Event/EventData/Data[@Name='IpPort']"/>
        <username xpath="Event/EventData/Data[@Name='TargetUserName']"/>
        <domain xpath="Event/EventData/Data[@Name='TargetDomainName']"/>
      </selector>

      <!-- Audit failures from failed login attempts to Microsoft SQL Server -->
      <selector name="mssql" input_type="EventLog">
        <query>
          <![CDATA[
            <Select Path="Application">*[System[(band(Keywords,40532396646334464))] and System/Provider/@Name='MSSQLSERVER']</Select>
          ]]>
        </query>
        <address xpath="Event/EventData/Data">
          <![CDATA[
            \[Client ?: ?(?<address>.*?)\]
          ]]>
        </address>
      </selector>

      <!-- Block audit failures from failed login attempts to MySQL Server -->
      <selector name="mysql" input_type="EventLog">
        <query>
          <![CDATA[
            <Select Path="Application">*[System[(band(Keywords,36028797018963968))] and System/Provider/@Name='MySQL']</Select>
          ]]>
        </query>
        <address xpath="Event/EventData/Data">
          <![CDATA[
            Access denied for user '.*?'@'(?<address>.*?)'
          ]]>
        </address>
      </selector>
      
      <!-- Selector for flat log file input lines --><!--
      <selector name="apache_log" input_name="apache">
        <regexps>
          <regexp type="fail"><![CDATA[test fail rule (?<address>.*?) and (?<port>.*?) and (?<username>.*?) and (?<domain>.*?)]]></regexp>
          <regexp type="ignore"><![CDATA[test ignore rule]]></regexp>
        </regexps>
      </selector>-->

      <!-- Selector for ssh log file --><!--
      <selector name="secure_log" input_name="ssh">
        <regexps>
          <regexp type="fail"><![CDATA[^(?<time_b>...) (?<time_e>..) (?<time_H>..):(?<time_M>..):(?<time_S>..) (?<hostname>\S+) sshd\[\d+\]: Failed password for (?<user>.*) from (?<address>\S+) port (?<port>\d+) ssh2$]]></regexp>
        </regexps>
      </selector>-->
    </selectors>

    <!-- Parameters for log event producer/consumer queue -->
    <queue>
      <maxsize>100000</maxsize><!-- maximum lenght of event queue (0 ... no limit) -->
      <maxtime>10</maxtime><!-- maximum run time for full chain of processors (0 ... no limit) -->
      <consumers>10</consumers><!-- number of event consumer threads -->
    </queue>

    <smtp>
      <host>smtp.example.com</host>
      <port>25</port>
      <ssl>false</ssl>
      <!-- SMTP AUTH with username/password requires SSL
      <ssl>true</ssl>
      <username>username</username>
      <password>secret</password>
      -->
    </smtp>
    
    <!-- User account configurations (used e.g. by AccountProcessor) -->
    <accounts>
      <account name="file_accounts" type="File">
        <description>Use user names (+ account status) from CSV text file</description>
        <options>
          <option key="casesensitive" value="false"/>
          <option key="filename" value="c:\F2B\accounts.txt"/>
          <option key="separator" value="	"/>
        </options>
      </account>
      <account name="ad_accounts" type="Cached+AD">
        <description>Cached AD accounts</description>
        <options>
          <option key="casesensitive" value="false"/>
          <option key="hosts" value="ldap1.example.com,ldap2.example.com,ldap3.example.com"/>
          <option key="port" value="389"/>
          <option key="ssl" value="false"/>
          <option key="starttls" value="false"/>
          <option key="auth" value="basic"/>
          <option key="username" value="EXAMPLE\username"/>
          <option key="password" value="secret"/>
          <option key="base" value="DC=example,DC=com"/>
          <option key="filter" value="(objectClass=user)"/>
          <option key="cache_positive_time" value="600"/>
          <option key="cache_negative_time" value="60"/>
          <option key="cache_positive_max_size" value="10000"/>
          <option key="cache_negative_max_size" value="1000"/>
          <option key="refresh_inc" value="300"/>
          <option key="refresh_full" value="3600"/>
        </options>
      </account>
    </accounts>

    <!-- Processors are instances of classes that inherits from F2B::BaseProcessor class.
    Each procesor can be defined multiple times with different options.
    Processor attributes:
      name .......... unique processor name (can be used as label in <goto/> element)
      type .......... processor class name
    Processor elements:
      description ... short description of processor function
      options ....... processor options (name -> value pairs different for each processor)
      goto .......... goto next/error label (processor name)
                      "bool" processors supports also success/failure attribute
      ranges ........ list of IP ranges (special option available only for RangeProcessor)
    Available processors:
      Label ........ this module does nothig and can be used as a label for goto element
      Stop ......... module immediately terminate event processing (skips all following processors)
      Parallel ..... run defined processors parallely in separate worker threads
      filters (should be used with goto element and success/failure attribute):
        Login ...... filter log events according login (audit) success/failure
        Range ...... filter log events according client IP address specified here
        RangeFile .. filter log events according client IP address read from config file
        Input ...... filter log events according input type, input name and selector name
        Case ....... use template to create next processor name
                     e.g. label_for_${Event.Input}_${Event.Selector}
        Account .... filter log events according user account properties
      Sleep ........ stop worker thread for given interval (for debugging)
      Logger ....... log selected events in a file (timestamp, hostname, selector_name, IP address, ...)
      LoggerSQL .... log selected events in SQL database using ODBC driver (configure auto-reconnect)
      Fail2ban ..... provides fail to ban
      Mail ......... send email with predefined template
      Cmd .......... run command with templated arguments
    Special action processors (rely on data provided by Fail2ban processor):
      Fail2BanCmd .. execute external application/script (replace variables in cmd template)
      Fail2BanMSMQ . send F2BFW message to Microsoft Message Queue used by F2BQueue.exe or F2BFirewall.exe
      Fail2BanWFP .. configure local firewall using WFP API (add new reject F2B filter rules and remove expired)
    -->
    <processors>
      <processor name="first" type="Label">
        <description>Label for first processor</description>
      </processor>
      <processor name="event_data" type="EventData">
        <description>Add all user data from windows event log record as ${EventData.*} variables</description>
      </processor>
      <processor name="sleep" type="Sleep">
        <description>Processor for debuging / testing concurency</description>
        <options>
          <option key="mode" value="random"/>
          <option key="interval" value="10"/>
        </options>
      </processor>
      <processor name="logger" type="Logger">
        <description>Log all selected events in log file</description>
        <options>
          <option key="file" value="c:\F2B\full.log"/>
          <option key="size" value="1073741824"/>
          <option key="rotate" value="4"/>
          <option key="template" value="${Event.Timestamp}\t${Event.TimeCreated}\t${Event.Hostname}\t${Event.Id}\t${Event.Input}\t${Event.Selector}\t${Event.Login}\t${EventData.Status}\t${EventData.SubStatus}\t${Event.MachineName}\t${Event.EventId}\t${Event.RecordId}\t${Event.Address}\t${Event.Port}\t${Event.Username}\t${Event.Domain}\r\n"/>
          <option key="synchronized" value="true"/>
        </options>
      </processor>
      <processor name="logger_sql" type="LoggerSQL">
        <description>Log all selected events in MySQL database using ODBC</description>
        <options>
          <!--
            CREATE TABLE `f2b` (
            `inserted` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            `timestamp` BIGINT DEFAULT NULL,
            `hostname` VARCHAR(50) DEFAULT NULL,
            `id` INTEGER DEFAULT NULL,
            `input` VARCHAR(50) DEFAULT NULL,
            `selector` VARCHAR(50) DEFAULT NULL,
            `status` VARCHAR(10) DEFAULT NULL,
            `event` INTEGER DEFAULT NULL,
            `record` INTEGER DEFAULT NULL,
            `machine` VARCHAR(50) DEFAULT NULL,
            `created` BIGINT DEFAULT NULL,
            `provider` VARCHAR(40) DEFAULT NULL,
            `address` VARCHAR(40) DEFAULT NULL,
            `port` SMALLINT DEFAULT NULL,
            `username` VARCHAR(25) DEFAULT NULL,
            `domain` VARCHAR(20) DEFAULT NULL
            );
          -->
          <!-- MySQL ODBC OPTION AUTO_RECONNECT(4194304) -->
          <option key="odbc" value="DRIVER={MySQL ODBC 3.51 Driver};SERVER=mysql.example.com;PORT=3306;DATABASE=f2b;USER=username;PASSWORD=secret;OPTION=4194304"/>
          <!-- MSSQL ODBC connection with autoreconnect enabled
          <option key="odbc" value="DRIVER={ODBC Driver 11 for SQL Server};SERVER=server_that_supports_connection_resiliency;UID=username;PWD=secret;ConnectRetryCount=2;ConnectRetryInterval=1"/>
          -->
          <option key="table" value="f2b"/>
          <option key="columns" value="id,timestamp,hostname,input,selector,status,event,record,machine,created,provider,address,port,username,domain"/>
          <option key="column.timestamp" value="${Event.Timestamp}"/>
          <option key="column.hostname" value="${Event.Hostname}"/>
          <option key="column.id" value="${Event.Id}"/>
          <option key="column.input" value="${Event.Input}"/>
          <option key="column.selector" value="${Event.Selector}"/>
          <option key="column.login" value="${Event.Login}"/>
          <option key="column.status" value="${EventData.Status:=-1}"/>
          <option key="column.substatus" value="${EventData.SubStatus:=-1}"/>
          <option key="column.event" value="${Event.EventId}"/>
          <option key="column.record" value="${Event.RecordId}"/>
          <option key="column.machine" value="${Event.MachineName}"/>
          <option key="column.created" value="${Event.TimeCreated}"/>
          <option key="column.provider" value="${Event.ProviderName}"/>
          <option key="column.address" value="${Event.Address}"/>
          <option key="column.port" value="${Event.Port}"/>
          <option key="column.username" value="${Event.Username}"/>
          <option key="column.domain" value="${Event.Domain}"/>
          <option key="timeout" value="15"/>
          <option key="async" value="true"/>
          <option key="async_max_queued" value="1000"/>
        </options>
      </processor>
      <processor name="login" type="Login">
        <description>Skip events that correspond successfull login</description>
        <options>
          <option key="maxsize" value="100000"/>
          <option key="findtime" value="86400"/>
          <option key="count" value="24"/>
          <option key="ipv4_prefix" value="32"/>
          <option key="ipv6_prefix" value="64"/>
          <option key="state" value="c:\F2B\login.state"/>
        </options>
        <goto success="last"/>
      </processor>
      <processor name="case" type="Case">
        <description>Choose next processor according template</description>
        <options>
          <option key="template" value="label_for_${Event.Input}_${Event.Selector}"/>
        </options>
        <goto failure="whitelist"/>
      </processor>
      <processor name="whitelist" type="Range">
        <description>Whitelist IP addresses</description>
        <!-- apply this processor only to log events from defined IP addresses -->
        <ranges>
          <range network="127.0.0.0/8"/>
          <range network="192.0.2.0/24"/>
          <range network="::1/128"/>
          <range network="2001:db8::/32"/>
        </ranges>
        <options>
          <!-- create ${whitelist.Mail} variable on successful search -->
          <option key="mail" value="whitelist-admin@example.com"/>
        </options>
        <!-- apply this processor to matched log events and jump to last processor -->
        <goto success="last"/>
      </processor>
      <processor name="address_group" type="RangeFile">
        <description>Read address ranges from text file (automatically reread modifications)</description>
        <options>
          <option key="filename" value="c:\F2B\IP.ranges"/>
        </options>
        <!-- apply this processor to matched log events and jump to last processor -->
        <goto success="last"/>
      </processor>
      <processor name="login_input" type="Input">
        <description>Select just login events from all local and remote inputs</description>
        <options>
          <!-- <option key="type" value="(EventLog|FileLog)"/> -->
          <option key="input" value="(local.*|remote.*)"/>
          <option key="selector" value="(login|specific_login)"/>
        </options>
        <!-- specify label where to continue if filters or ranges were not passed -->
        <!--
        <goto success="if_filter_login_succeeded" failure="if_filter_login_failed"/>
        -->
      </processor>

      <processor name="if_ad_account_exists" type="Account">
        <description>Filter log events for non-existing accounts</description>
        <options>
          <!-- data "source" is reference to existing "account" name -->
          <option key="account" value="ad_accounts"/>
          <option key="mode" value="exists"/>
          <!--
          <option key="mode" value="disabled"/>
          <option key="mode" value="locked"/>
          <option key="mode" value="disabled|locked"/>
          -->
        </options>
        <goto success="ad_account_exists" failure="not_ad_account_exists" error="ad_account_error"/>
      </processor>
      <processor name="ad_account_exists" type="Label">
        <description>Just dummy label, processor executed only for existing user acconts</description>
        <goto next="endif_ad_account_exists"/>
      </processor>
      <processor name="not_ad_account_exists" type="Label">
        <description>Just dummy label, processor executed only for non-existing user acconts</description>
        <goto next="endif_ad_account_exists"/>
      </processor>
      <processor name="ad_account_error" type="Label">
        <description>Just dummy label, processor executed only in case of error looking for user acconts</description>
        <goto next="endif_ad_account_exists"/>
      </processor>
      <processor name="endif_ad_account_exists" type="Label"/>

      <processor name="parallel" type="Parallel">
        <description>Example configuration for Parallel processor</description>
        <options>
          <option key="processors" value="processor1,processor2,processor3"/>
        </options>
        <goto next="fail2ban"/>
      </processor>
      <processor name="processor1" type="Stop"/>
      <processor name="processor2" type="Stop"/>
      <processor name="processor3" type="Stop"/>

      <processor name="fail2ban" type="Fail2ban">
        <description>Test fail2ban processor</description>
        <options>
          <!--
          This module monitors number of log events during "findtime"
          period. If you reach "maxretry" events in this period than
          action event is formed, pushed in action queue and all
          action modules specified in "actions" options are executed
          in separate thread.
          
          Be avare that with default configuration this module can use ~
          20*maxretry memory per attacker IP address and log events
          received during "findtime" period, so instead of default
          <option key="history" value="all"/>
          you can specify limited number of samples in ring buffer
          <option key="history" value="fixed"/>
          <option key="history.fixed.count" value="10"/>
          or you can even use just one number per IP
          <option key="history" value="one"/>
          The drawback of "fixed" or "one" usage is not so precise
          history informations that could be used for repetitive attacks.
          
          To limit number of possible IP(v6) addresses that can be
          used by attacker you should at least specify reasonable
          ipv6_prefix that agregate all failures from network with
          defined prefix (on the other hand if you have trusted IPv6
          network you can still use per IPv6 fail2ban in a different
          processor chain). The default value for IPv4 is per IP
          F2B monitoring (prefix /32) and per subnet IPv6 monitoring
          (prefix /64).
          -->
          <option key="state" value="c:\F2B\fail2ban.state"/>
          <option key="findtime" value="600"/>
          <option key="ipv4_prefix" value="32"/>
          <option key="ipv6_prefix" value="64"/>
          <option key="history" value="all"/>
          <!--
          <option key="history" value="all"/>
          <option key="history" value="one"/>
          <option key="history" value="fixed"/>
          <option key="history.fixed.count" value="10"/>
          <option key="history.fixed.decay" value="1.0"/>
          <option key="history" value="rrd"/>
          <option key="history.rrd.count" value="5"/>
          <option key="history.rrd.repeat" value="2"/>
          -->
          <option key="tresholds" value="test,soft,hard"/>
          <option key="treshold.test.function" value="simple"/>
          <option key="treshold.test.maxretry" value="0"/>
          <option key="treshold.test.repeat" value="0"/>
          <option key="treshold.test.bantime" value="300"/>
          <option key="treshold.test.action" value="action_test"/>
          <option key="treshold.soft.function" value="simple"/>
          <option key="treshold.soft.maxretry" value="7"/>
          <option key="treshold.soft.repeat" value="0"/>
          <option key="treshold.soft.bantime" value="-1"/>
          <option key="treshold.soft.action" value="action_soft"/>
          <option key="treshold.hard.function" value="simple"/>
          <option key="treshold.hard.maxretry" value="10"/>
          <option key="treshold.hard.repeat" value="0"/>
          <option key="treshold.hard.bantime" value="600"/>
          <option key="treshold.hard.action" value="action_hard"/>
          <!-- this should go to default filewall configuration options
          <option key="maxentries" value="100000"/>
          -->
        </options>
      </processor>
      <!--
      last dummy processor that could serve as label when we want to skip
      evaluation of all remaining processors. Last processor automatically
      behaves like "stop" processor.
      -->
      <processor name="last" type="Stop" description="Final processor"/>

      <!-- ************************************************************ -->
      <!-- ***** configure (fail2ban) actions as normal processor ***** -->
      <!-- ************************************************************ -->
      
      <!-- Actions for fail2ban module reaching test treshold -->
      <processor name="action_test" type="Label"/>
      <processor name="action_test_mail" type="Mail">
        <options>
          <option key="sender" value="f2b@example.com"/>
          <option key="recipient" value="f2b-admin@example.com,${${RangeFile.Last}.Mail:=}"/>
          <option key="subject" value="[F2B] Fail2Ban[${Fail2ban.Last}] reached ${${Fail2ban.Last}.Treshold} treshold for ${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="body" value="List of variables and expressions

Fail2ban:
  all: ${Fail2ban.All}
  last: ${Fail2ban.Last}
  ${Fail2ban.Last}.Address: ${${Fail2ban.Last}.Address}
  ${Fail2ban.Last}.Prefix: ${${Fail2ban.Last}.Prefix}
  ${Fail2ban.Last}.FailCnt: ${${Fail2ban.Last}.FailCnt}
  ${Fail2ban.Last}.Treshold: ${${Fail2ban.Last}.Treshold}
  ${Fail2ban.Last}.Bantime: ${${Fail2ban.Last}.Bantime}
  ${Fail2ban.Last}.Expiration: ${${Fail2ban.Last}.Expiration}

RangeFile:
  all: ${RangeFile.All:=}
  last: ${RangeFile.Last:=none}
  ${RangeFile.Last}.Range: ${${RangeFile.Last}.Range:=none}
  ${RangeFile.Last}.Mail: ${${RangeFile.Last}.Mail:=none}

Login:
  last: ${Login.Last:=none}
  ${Login.Last}.Success = ${${Login.Last}.Success:=none}
  ${Login.Last}.Failure = ${${Login.Last}.Failure:=none}

Event:
  id: ${Event.Id}
  timestamp: ${Event.Timestamp}
  created: ${Event.TimeCreated}
  hostname: ${Event.Hostname}
  type: ${Event.Type}
  input: ${Event.Input}
  selector: ${Event.Selector}
  address: ${Event.Address}
  port: ${Event.Port}
  username: ${Event.Username}
  domain: ${Event.Domain}
  login: ${Event.Login}
  event: ${Event.EventId}
  machine: ${Event.MachineName}
  recordid: ${Event.RecordId}
  machine: ${Event.MachineName}
  provider: ${Event.ProviderName}
  process: ${Event.ProcessId}

EventData:
  SubjectUserSid: ${EventData.SubjectUserSid}
  SubjectUserName: ${EventData.SubjectUserName}
  SubjectDomainName: ${EventData.SubjectDomainName}
  SubjectLogonId: ${EventData.SubjectLogonId}
  TargetUserSid: ${EventData.TargetUserSid}
  TargetUserName: ${EventData.TargetUserName}
  TargetDomainName: ${EventData.TargetDomainName}
  Status: ${EventData.Status}
  SubStatus: ${EventData.SubStatus}
  FailureReason: ${EventData.FailureReason}
  LogonType: ${EventData.LogonType}
  LogonProcessName: ${EventData.LogonProcessName}
  AuthenticationPackageName: ${EventData.AuthenticationPackageName}
  WorkstationName: ${EventData.WorkstationName}
  TransmittedServices: ${EventData.TransmittedServices}
  LmPackageName: ${EventData.LmPackageName}
  KeyLength: ${EventData.KeyLength}
  ProcessId: ${EventData.ProcessId}
  ProcessName: ${EventData.ProcessName}
  IpAddress: ${EventData.IpAddress}
  IpPort: ${EventData.IpPort}


Expressions:
  simple aritmetic:
    1 + 2 * 3 - 4 = $(1 + 2 * 3 - 4)
    (1 + 2) * 3 - 4 = $((1 + 2) * 3 - 4)
    1 + (2 * 3) - 4 = $(1 + (2 * 3) - 4)
  negation:
    !0 = $(!0)              !1 = $(!1)                  !2 = $(!2)
    !false = $(!false)          !true = $(!true)
    !0 + 1 + !2 + 3 = $(!0 + 1 + !2 + 3)
    0 + !1 + 2 + !3 = $(0 + !1 + 2 + !3)
  comparison:
    0 == 0 = $(0 == 0)          1 == 0 = $(1 == 0)
    0 != 0 = $(0 != 0)          1 != 0 = $(1 != 0)
    0 &gt; 0 = $(0 &gt; 0)           1 &gt; 0 = $(1 &gt; 0)
    0 &gt;= 0 = $(0 &gt;= 0)          1 &gt;= 0 = $(1 &gt;= 0)
    0 &lt; 0 = $(0 &lt; 0)           1 &lt; 0 = $(1 &lt; 0)
    0 &lt;= 0 = $(0 &lt;= 0)          1 &lt;= 0 = $(1 &lt;= 0)
  bitwise operation
    1 | 2 = $(1 | 2)           13 &amp; 10 = $(13 &amp; 10)
    1 || 2 = $(1 || 2)          13 &amp;&amp; 10 = $(13 &amp;&amp; 10)
  typecasting from double to integer
    1.6 = $(1.6)           int(1.6)*2 = $(int(1.6)*2)          bool(0)=$(bool(0))
    1.6*2 = $(1.6*2)         int(1.6*2) = $(int(1.6*2))          bool(123)=$(bool(123))
    7.9 / 4 = $(7.9 / 4)
    int(7.9 / 4) = $(int(7.9 / 4))
    7.9 % 4 = $(7.9 % 4)
  using variables in expressions:
    wintime(${Event.Timestamp}) == unixtime($((${Event.Timestamp} - 621355968000000000) / 10000000:=invalid))
"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="cmd" type="Cmd">
        <description>Execute command</description>
        <options>
          <option key="path" value="C:\Windows\System32\WindowsPowerShell\v1.0\powershell.EXE"/>
          <option key="args" value="-File c:\F2B\test.ps1 ${EventData.EventID}"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_test_logger" type="Logger">
        <description>Log all selected events in log file</description>
        <options>
          <option key="file" value="c:\F2B\fail2ban.log"/>
          <option key="size" value="1073741824"/>
          <option key="rotate" value="4"/>
          <option key="template" value="${Event.Timestamp}	${Event.TimeCreated}	${Event.Hostname}	${Event.Id}	${Fail2ban.Last}	${${Fail2ban.Last}.Treshold}	${${Fail2ban.Last}.Address}	${${Fail2ban.Last}.Prefix}\r\n"/>
          <option key="synchronized" value="true"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="logger_sql_test" type="LoggerSQL">
        <description>Log all selected events in MySQL database using ODBC</description>
        <options>
          <!--
            CREATE TABLE `f2b_test` (
            `timestamp` BIGINT DEFAULT NULL,
            `hostname` VARCHAR(50) DEFAULT NULL,
            `module` VARCHAR(20) DEFAULT NULL,
            `address` VARCHAR(40) DEFAULT NULL,
            `treshold` VARCHAR(20) DEFAULT NULL,
            );
          -->
          <option key="odbc" value="DRIVER={MySQL ODBC 3.51 Driver};SERVER=mysql.example.com;PORT=3306;DATABASE=f2b;USER=username;PASSWORD=secret;OPTION=4194304"/>
          <option key="table" value="f2b_test"/>
          <option key="columns" value="timestamp,hostname,module,address,treshold"/>
          <option key="column.timestamp" value="${Event.Timestamp}"/>
          <option key="column.hostname" value="${Event.Hostname}"/>
          <option key="column.module" value="${Fail2ban.Last}"/>
          <option key="column.address" value="${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="column.treshold" value="${${Fail2ban.Last}.Treshold}"/>
        </options>
      </processor>
      <processor name="action_test_msmq" type="Fail2banMSMQ">
        <description>Send message to F2BPS service using MSMQ</description>
        <options>
          <option key="queue_name" value=".\private$\F2BProductionQueue"/>
          <option key="max_ignore" value="60"/> <!-- maximum time in seconds we ignore message with same parameters (minimum is real bantime/100) -->
          <option key="bantime" value="600"/> <!-- used only if Fail2ban module doesn't provide specific value -->
          <option key="time_to_be_received" value="300"/> <!-- how long should message wait to be processed in MSMQ before we discard it -->
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_test_cmd" type="Fail2banCmd">
        <description>Execute F2BFirewall.exe to add local WFP filter (this module can be used to run arbitrary executable / script)</description>
        <options>
          <option key="path" value="c:\F2B\F2BFirewall.exe"/> <!-- path to F2BFirewall.exe executable -->
          <option key="args" value="add-filter /address ${${Fail2ban.Last}.Address} /expiration ${${Fail2ban.Last}.Expiration}/${${Fail2ban.Last}.Prefix}"/> <!-- executable arguments -->
          <option key="max_ignore" value="60"/> <!-- maximum time in seconds we ignore message with same parameters (minimum is real bantime/100) -->
          <option key="bantime" value="600"/> <!-- used only if Fail2ban module doesn't provide specific value -->
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_test_last" type="Stop" description="Final processor"/>

      <!-- Actions for fail2ban module reaching soft treshold -->
      <processor name="action_soft" type="Label"/>
      <processor name="action_soft_mail" type="Mail">
        <options>
          <option key="sender" value="helpdesk@example.com"/>
          <option key="recipient" value="f2b-admin@example.com"/>
          <option key="subject" value="[F2B] Fail2Ban[${Fail2ban.Last}] reached ${${Fail2ban.Last}.Treshold} treshold for ${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="body" value="module: ${Fail2ban.Last}
address: ${Fail2ban.address}
prefix: ${Fail2ban.prefix}
treshold: ${Fail2ban.treshold}
"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_soft_last" type="Stop" description="Final processor"/>

      <!-- Actions for fail2ban module reaching hard treshold -->
      <processor name="action_hard" type="Label"/>
      <processor name="action_hard_mail" type="Mail">
        <options>
          <option key="sender" value="helpdesk@example.com"/>
          <option key="recipient" value="f2b-admin@example.com"/>
          <option key="subject" value="[F2B] Fail2Ban[${Fail2ban.Last}] reached ${${Fail2ban.Last}.Treshold} treshold for ${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="body" value="module: ${Fail2ban.Last}
address: ${${Fail2ban.Last}.Address}
prefix: ${${Fail2ban.Last}.Prefix}
treshold: ${${Fail2ban.Last}.Treshold}
"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_hard_msmq" type="Fail2banMSMQ">
        <description>Send message to F2BPS service using MSMQ</description>
        <options>
          <option key="queue_name" value=".\private$\F2BProductionQueue"/>
          <option key="max_ignore" value="60"/> <!-- maximum time in seconds we ignore message with same parameters (minimum is real bantime/100) -->
          <option key="bantime" value="600"/> <!-- used only if Fail2ban module doesn't provide specific value -->
          <option key="time_to_be_received" value="300"/> <!-- how long should message wait to be processed in MSMQ before we discard it -->
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_hard_wfp" type="Fail2banWFP">
        <description>Ban IP address reaching fail2ban treshold with local firewall using WFP API (F2BWFP.dll)</description>
        <options>
          <option key="max_ignore" value="60"/> <!-- maximum time in seconds we ignore message with same parameters (minimum is real bantime/100) -->
          <option key="bantime" value="600"/> <!-- used only if Fail2ban module doesn't provide specific value -->
          <option key="cleanup" value="60"/> <!-- clean list of expired rules every cleanup seconds -->
          <option key="max_filter_rules" value="0"/> <!-- maximum number of active F2B filter rules (0 .. no limit) -->
          <option key="permit" value="false"/> <!-- add F2B permit filter rule (instead of blocking rule) -->
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_hard_fw" type="Fail2banFw">
        <description>Ban IP address reaching fail2ban treshold with local firewall using COM Firewall API (FirewallAPI.dll) ... much slower than WFP</description>
        <options>
          <option key="max_ignore" value="60"/> <!-- maximum time in seconds we ignore message with same parameters (minimum is real bantime/100) -->
          <option key="bantime" value="600"/> <!-- used only if Fail2ban module doesn't provide specific value -->
          <option key="cleanup" value="60"/> <!-- clean list of expired rules every cleanup seconds -->
          <option key="max_filter_rules" value="0"/> <!-- maximum number of active F2B filter rules (0 .. no limit) -->
          <option key="permit" value="false"/> <!-- add F2B permit filter rule (instead of blocking rule) -->
          <option key="persistent" value="false"/> <!-- F2B persistent filter rule (survive restart) -->
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_hard_last" type="Stop" description="Final processor"/>

    </processors>

  </f2bSection>

</configuration>
