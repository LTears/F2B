<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="f2bSection" type="F2B.F2BSection, F2BLogAnalyzer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>

  <!-- System.Runtime.Caching.MemoryCache configuration (commented out to use default values) -->
  <!-- (MemoryCache no longer in use in current sources)
  <namedCaches>
    <add Name="CachedAccount[ad_accounts]" CacheMemoryLimitMegabytes="0"/>
    <add Name="F2B.processors.Fail2banMSMQProcessor.recent" CacheMemoryLimitMegabytes="1"/>
  </namedCaches>
  -->

  <!-- Fail2ban configuratin section -->
  <!-- configuration can be specified directly here or it can be included from external file using
    <f2bSection configSource="f2b.config"/>
  -->
  <f2bSection>

    <!-- Fail2ban event inputs

    default input attributes
      * name ... unique input name
      * type ... input type (input class name)
    
    supported input types:
      * windows event log (local or remote)
      * application log files with all information on one line parsed by regex

    To subscribe windows event log (espetially Security log) special privileges
    are required. LocalSystem service account has by default sufficient rights
    or F2BLA service can be executed under arbitrary user account that satisfy
    one of folowing conditions
      * service user is member of "Event Log Readers" group
      * special ACL was applied to event log (LOG_NAME can be e.g. Security, Application, ...)
        wevtutil gl "LOG_NAME"
        wevtutil sl "LOG_NAME" /ca:"original SDDL"(A;;0x3;;;"user SID")

    usage:
      * subscribe to local event log
        <input name="local_eventlog" type="EventLog"/>
      * subscribe to event log on given machine with service credentials
        <input name="remote_eventlog" type="EventLog" server="win1.example.com"/>
      * subscribe to event log on given machine with custom credentials
        <input name="remote_eventlog_auth" type="EventLog" server="win1.example.com"
               domain="EXAMPLE.COM" username="username" password="secret"/>
      * subscribe to changes in local log file
        <input name="apache" type="FileLog" logpath="c:\apache\log\access_log"/>
    -->
    <inputs>
      <input name="local_eventlog" type="EventLog"/>
    </inputs>

    <!-- Event log selectors are used to filter interesting events that we want
    to treat later with F2B processors. Selectors are also used to extract basic
    data from log message. For each input name or type selector configuration
    can require different configuration options.

    default selector attributes
      * name ........ unique selector name
      * input_name .. event input name (input_name or input type must be defined)
      * input_type .. event input type (input_name or input type must be defined)
      * login ....... optional event kind unknown, success, fail
                      (default: unknown, autodetected for eventlog using keyword)
      * processor ... processor name used for selected events
                      (default: first processor defined in `<processors>` section)
    
    EventLog selector configuration (input_type="EventLog"):
      Selector query is required configuration option and it is used by log API
      (see https://msdn.microsoft.com/en-us/library/bb399427%28v=VS.90%29.aspx).
      You can use mmc Event Viewer snap-in to visually build required query with
      help of "Create Vustom View" -> "Define your filter" -> "XML".

      Client IP address, port, username and domain can be extracted from eventlog
      data using XPath + regex. Definition for IP address is required and must
      match valid IPv4/IPv6 address.

    Flat log file configuration (input_type="FileLog"):
      List of regular expressions are used to match log lines and extract required
      data (e.g. IP address). There are several types of regular expression
        ignore ... matched line is completely ignored
        fail ..... matched line means login failure
        success .. matched line means login success
    -->
    <!-- List of globally defined EventLog keywords
    (System.Diagnostics.Eventing.Reader.StandardEventKeywords)
    Member Name        | Hex              | Decimal
    ===================+==================+======================
    AuditFailure       | 0x10000000000000 | 4503599627370496
    AuditSuccess       | 0x20000000000000 | 9007199254740992
    CorrelationHint    | 0x10000000000000 | 4503599627370496
    CorrelationHint2   | 0x40000000000000 | 18014398509481984
    EventLogClassic    | 0x80000000000000 | 36028797018963968
    None               | 0x00000000000000 | 0
    ResponseTime       | 0x01000000000000 | 281474976710656
    Sqm                | 0x08000000000000 | 2251799813685248
    WdiContext         | 0x02000000000000 | 562949953421312
    WdiDiagnostic      | 0x04000000000000 | 1125899906842624
    -->
    <selectors>

      <!-- Test selector for eventlog data produced by LogEvents.exe -->
      <selector name="test" input_type="EventLog">
        <query><![CDATA[<Select Path="Application">*[System[(Provider/@Name='F2B test log event') and (EventID=1)]]</Select>]]></query>
        <address xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></address>
        <port xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></port>
        <username xpath="Event/EventData/Data"><![CDATA[(?<username>.+)@(?<address>.+):(?<port>.+)]]></username>
      </selector>

      <!-- All eventlog security audit failures (keyword 0x10000000000000)
      These events include e.g. Kerberos tgt requests, failed logins
      to Windows, terminal services logins, ... If we want to ignore
      Kerberos failures except "unknown username" and "bad password"
      it is possible to discard messages using "Supress" element.
      -->
      <selector name="login" input_type="EventLog">
        <query>
          <![CDATA[
            <Select Path="Security">*[System[(band(Keywords,4503599627370496))]]</Select>
            <Suppress Path="Security">
              (*[System[(EventID='4768')]] or *[System[(EventID='4771')]])
              and
              (*[EventData[Data[@Name='Status']!='0x6']] and *[EventData[Data[@Name='Status']!='0x18']])
            </Suppress>
          ]]>
        </query>
        <!-- Select event XML element with XPath and use its text content -->
        <address xpath="Event/EventData/Data[@Name='IpAddress']"/>
        <port xpath="Event/EventData/Data[@Name='IpPort']"/>
        <username xpath="Event/EventData/Data[@Name='TargetUserName']"/>
        <domain xpath="Event/EventData/Data[@Name='TargetDomainName']"/>
      </selector>

      <!-- All eventlog security audit success (keyword 0x20000000000000)
      This selector mark all selected events with login status SUCCESS
      and this maker can be used by Login processor to filter events
      representing successfull login from the rest of captured events.
      -->
      <selector name="login_success" input_type="EventLog" login="success">
        <query>
          <![CDATA[
            <Select Path="Security">*[System[(band(Keywords,9007199254740992))]]</Select>
          ]]>
        </query>
        <address xpath="Event/EventData/Data[@Name='IpAddress']"/>
        <port xpath="Event/EventData/Data[@Name='IpPort']"/>
        <username xpath="Event/EventData/Data[@Name='TargetUserName']"/>
        <domain xpath="Event/EventData/Data[@Name='TargetDomainName']"/>
      </selector>

    </selectors>

    <!-- Parameters for log event producer/consumer queue -->
    <queue>
      <maxsize>100000</maxsize><!-- maximum lenght of event queue (0 ... no limit) -->
      <maxtime>10</maxtime><!-- maximum run time for full chain of processors -->
      <consumers>10</consumers><!-- number of event consumer threads -->
    </queue>

    <smtp>
      <host>smtp.example.com</host>
      <port>25</port>
      <ssl>false</ssl>
      <!-- SMTP AUTH with username/password requires SSL
      <ssl>true</ssl>
      <username>username</username>
      <password>secret</password>
      -->
    </smtp>

    <!-- User account configurations (used e.g. by AccountProcessor) -->
    <accounts>
      <account name="file_accounts" type="File">
        <description>Use user names (+ account status) from CSV text file</description>
        <options>
          <option key="casesensitive" value="false"/>
          <option key="filename" value="c:\F2B\accounts.txt"/>
          <option key="separator" value="	"/>
        </options>
      </account>
      <account name="ad_accounts" type="Cached+AD">
        <description>Cached AD accounts</description>
        <options>
          <option key="casesensitive" value="false"/>
          <option key="hosts" value="ldap1.example.com,ldap2.example.com,ldap3.example.com"/>
          <option key="port" value="389"/>
          <option key="ssl" value="false"/>
          <option key="starttls" value="false"/>
          <option key="auth" value="basic"/>
          <option key="username" value="EXAMPLE\username"/>
          <option key="password" value="secret"/>
          <option key="base" value="DC=example,DC=com"/>
          <option key="filter" value="(objectClass=user)"/>
          <option key="cache_positive_time" value="600"/>
          <option key="cache_negative_time" value="60"/>
          <option key="cache_positive_max_size" value="10000"/>
          <option key="cache_negative_max_size" value="1000"/>
          <option key="refresh_inc" value="300"/>
          <option key="refresh_full" value="3600"/>
        </options>
      </account>
    </accounts>

    <!-- Processors are instances of classes that inherits from F2B::BaseProcessor class.
    Each procesor can be defined multiple times with different options.
    Processor attributes:
      name .......... unique processor name (can be used as label in <goto/> element)
      type .......... processor class name
    Processor elements:
      description ... short description of processor function
      options ....... processor options (name -> value pairs different for each processor)
      goto .......... goto next/error label (processor name)
                      "bool" processors supports also success/failure attribute
      ranges ........ list of IP ranges (special option available only for RangeProcessor)
    Available processors:
      Label ........ this module does nothig and can be used as a label for goto element
      Stop ......... module immediately terminate event processing (skips all following processors)
      Parallel ..... run defined processors parallely in separate worker threads
      filters (should be used with goto element and success/failure attribute):
        Login ...... filter log events according login (audit) success/failure
        Range ...... filter log events according client IP address specified here
        RangeFile .. filter log events according client IP address read from config file
        Input ...... filter log events according input type, input name and selector name
        Case ....... use template to create next processor name
                     e.g. label_for_${Event.Input}_${Event.Selector}
        Account .... filter log events according user account properties
      Sleep ........ stop worker thread for given interval (for debugging)
      Logger ....... log selected events in a file (timestamp, hostname, selector_name, IP address, ...)
      LoggerSQL .... log selected events in SQL database using ODBC driver (configure auto-reconnect)
      Fail2ban ..... provides fail to ban
      Mail ......... send email with predefined template
      Cmd .......... run command with templated arguments
    Special action processors (rely on data provided by Fail2ban processor):
      Fail2BanCmd .. execute external application/script (replace variables in cmd template)
      Fail2BanMSMQ . send F2BFW message to Microsoft Message Queue used by F2BQueue.exe or F2BFirewall.exe
      Fail2BanWFP .. configure local firewall using WFP API (add new reject F2B filter rules and remove expired)
    -->
    <processors>
      <!-- +=======================================+ -->
      <!-- | Selected log event processing section | -->
      <!-- +=======================================+ -->
      <processor name="login" type="Login">
        <description>Skip events that correspond successfull login</description>
        <options>
          <option key="state" value="c:\F2B\login.state"/>
        </options>
        <goto success="last"/>
      </processor>
      <processor name="event_data" type="EventData">
        <description>Add all user data from windows event log record as ${EventData.*} variables</description>
      </processor>
      <processor name="cvut_logger" type="Logger">
        <description>Log all selected events in log file</description>
        <options>
          <option key="file" value="c:\F2B\event.log"/>
          <option key="size" value="1073741824"/>
          <option key="rotate" value="4"/>
          <option key="template" value="${Event.Timestamp}\t${Event.TimeCreated}\t${Event.Hostname}\t${Event.Id}\t${Event.Input}\t${Event.Selector}\t${Event.Login}\t${EventData.Status}\t${EventData.SubStatus}\t${Event.MachineName}\t${Event.EventId}\t${Event.RecordId}\t${Event.Address}\t${Event.Port}\t${Event.Username}\t${Event.Domain}\r\n"/>
        </options>
      </processor>
      <processor name="whitelist" type="Range">
        <description>Whitelist IP harmless addresses</description>
        <ranges>
          <range network="127.0.0.1"/>
          <range network="192.0.2.0/24"/>
          <range network="::1/128"/>
          <range network="2001:db8::/32"/>
        </ranges>
        <goto success="last"/>
      </processor>
      <!-- RangeFile source file format:
      * one IPv4/IPv6 address range per line
      * optional email address separated by tabulator (on match define ${processor_name.Mail})
      example:
      192.168.123.123
      192.168.0.0/16	f2b-private-range-admin@example.com
      192.168.1.0/24	f2b-private-subrange-admin@example.com
      fc00::1234:1233
      fc00::/7	f2b-private-range-admin@example.com
      -->
      <processor name="range_critical" type="RangeFile">
        <description>List of most important server addresses (automatically reread after modification)</description>
        <options>
          <option key="filename" value="c:\F2B\range_critical.txt"/>
        </options>
        <goto success="fail2ban_range_critical"/>
      </processor>
      <processor name="range_important" type="RangeFile">
        <description>List of moderately important server addresses (automatically reread after modification)</description>
        <options>
          <option key="filename" value="c:\F2B\range_important.txt"/>
        </options>
        <goto success="fail2ban_range_important"/>
      </processor>
      <processor name="range_ipv6_prefix" type="Range">
        <description>List of IPv6 ranges where we want to apply per address fail2ban (instead of per /64 subnet)</description>
        <ranges>
          <range network="2001:db8::/32"/>
        </ranges>
        <goto success="fail2ban_range_ipv6_prefix"/>
      </processor>

      <!-- default fail2ban configuration -->
      <processor name="fail2ban_default" type="Fail2ban">
        <description>Default fail2ban configuration</description>
        <options>
          <option key="state" value="c:\F2B\fail2ban_default.state"/>
          <option key="findtime" value="60"/>
          <option key="history" value="all"/>
          <option key="tresholds" value="hard"/>
          <option key="treshold.hard.maxretry" value="10"/>
          <option key="treshold.hard.bantime" value="180"/>
          <option key="treshold.hard.repeat" value="160"/> <!-- call action again if still over treshold -->
          <option key="treshold.hard.action" value="action_fail2ban_hard"/>
          <!--
          <option key="history" value="all"/>
          <option key="history" value="one"/>
          <option key="history" value="fixed"/>
          <option key="history.fixed.count" value="10"/>
          <option key="history" value="rrd"/>
          <option key="history.rrd.count" value="5"/>
          <option key="history.rrd.repeat" value="2"/>
          -->
        </options>
      </processor>
      <processor name="default_end" type="Stop"/>

      <processor name="fail2ban_range_ipv6_prefix" type="Fail2ban">
        <description>Default fail2ban configuration for selected IPv6 ranges (per IPv6 client address F2B accounting)</description>
        <options>
          <option key="state" value="c:\F2B\fail2ban_range_ipv6_prefix.state"/>
          <option key="findtime" value="60"/>
          <option key="ipv6_prefix" value="128"/>
          <option key="history" value="all"/>
          <option key="tresholds" value="hard"/>
          <option key="treshold.hard.maxretry" value="10"/>
          <option key="treshold.hard.bantime" value="180"/>
          <option key="treshold.hard.repeat" value="160"/> <!-- call action again if still over treshold -->
          <option key="treshold.hard.action" value="action_fail2ban_hard"/>
        </options>
      </processor>
      <processor name="range_ipv6_prefix_end" type="Stop"/>

      <!-- fail2ban configuration for important servers / service providers -->
      <processor name="fail2ban_range_important" type="Fail2ban">
        <description>Fail2ban configuration for important IP addresses</description>
        <options>
          <option key="state" value="c:\F2B\fail2ban_range_important.state"/>
          <option key="findtime" value="60"/>
          <option key="tresholds" value="hard"/>
          <option key="treshold.hard.maxretry" value="40"/>
          <option key="treshold.hard.bantime" value="180"/>
          <option key="treshold.hard.repeat" value="160"/> <!-- call action again if still over treshold -->
          <option key="treshold.hard.action" value="action_fail2ban_hard"/>
        </options>
      </processor>
      <processor name="range_important_end" type="Stop"/>

      <!-- fail2ban configuration for critical servers / service providers -->
      <processor name="fail2ban_range_critical" type="Fail2ban">
        <description>Fail2ban configuration for important IP addresses (two tresholds for different number of failed logins)</description>
        <options>
          <option key="state" value="c:\F2B\fail2ban_range_critical.state"/>
          <option key="findtime" value="60"/>
          <option key="tresholds" value="soft,hard"/>
          <option key="treshold.soft.maxretry" value="150"/>
          <option key="treshold.soft.bantime" value="180"/>
          <option key="treshold.soft.repeat" value="86400"/> <!-- call action again if still over treshold -->
          <option key="treshold.soft.action" value="action_fail2ban_soft"/>
          <option key="treshold.hard.maxretry" value="250"/>
          <option key="treshold.hard.bantime" value="180"/>
          <option key="treshold.hard.repeat" value="160"/> <!-- call action again if still over treshold -->
          <option key="treshold.hard.action" value="action_fail2ban_hard"/>
        </options>
      </processor>
      <processor name="range_critical_end" type="Stop"/>

      <!-- +=======================================================+ -->
      <!-- | Action executed after reaching fail2ban soft treshold | -->
      <!-- +=======================================================+ -->
      <processor name="action_fail2ban_soft" type="Label"/>
      <processor name="action_fail2ban_soft_mail" type="Mail">
        <description>Send mail notification</description>
        <options>
          <option key="sender" value="f2b@example.com"/>
          <option key="recipient" value="f2b-admin@example.com,${${RangeFile.Last}.Mail:=}"/>
          <option key="subject" value="[F2B] Fail2Ban[${Fail2ban.Last}] reached ${${Fail2ban.Last}.Treshold} treshold for ${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="body" value="Fail2ban for critical address reached ${${Fail2ban.Last}.Treshold}"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_fail2ban_soft_end" type="Stop"/>

      <!-- +=======================================================+ -->
      <!-- | Action executed after reaching fail2ban hard treshold | -->
      <!-- +=======================================================+ -->
      <processor name="action_fail2ban_hard" type="Label"/>
      <processor name="action_fail2ban_hard_logger" type="Logger">
        <description>Log all fail2ban events in log file</description>
        <options>
          <option key="file" value="c:\F2B\fail2ban.log"/>
          <option key="size" value="1073741824"/>
          <option key="rotate" value="4"/>
          <option key="template" value="${Event.Timestamp}\t${Event.TimeCreated}\t${Event.Hostname}\t${Event.Id}\t${Fail2ban.Last}\t${${Fail2ban.Last}.Treshold}\t${${Fail2ban.Last}.Address}\t${${Fail2ban.Last}.Prefix}\r\n"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="action_fail2ban_hard_mail" type="Mail">
        <description>Send mail notification</description>
        <options>
          <option key="sender" value="f2b@example.com"/>
          <option key="recipient" value="f2b-admin@example.com,${${RangeFile.Last}.Mail:=}"/>
          <option key="subject" value="[F2B] Fail2Ban[${Fail2ban.Last}] reached ${${Fail2ban.Last}.Treshold} treshold for ${${Fail2ban.Last}.Address}/${${Fail2ban.Last}.Prefix}"/>
          <option key="body" value="List of variables and expressions

Fail2ban:
  all: ${Fail2ban.All}
  last: ${Fail2ban.Last}
  ${Fail2ban.Last}.Address: ${${Fail2ban.Last}.Address}
  ${Fail2ban.Last}.Prefix: ${${Fail2ban.Last}.Prefix}
  ${Fail2ban.Last}.FailCnt: ${${Fail2ban.Last}.FailCnt}
  ${Fail2ban.Last}.Treshold: ${${Fail2ban.Last}.Treshold}
  ${Fail2ban.Last}.Bantime: ${${Fail2ban.Last}.Bantime}
  ${Fail2ban.Last}.Expiration: ${${Fail2ban.Last}.Expiration}

RangeFile:
  all: ${RangeFile.All:=}
  last: ${RangeFile.Last:=none}
  ${RangeFile.Last}.Range: ${${RangeFile.Last}.Range:=none}
  ${RangeFile.Last}.Mail: ${${RangeFile.Last}.Mail:=none}

RangeFile[range_critical]:
  range: ${range_critical.Range:=unknown}
  mail: ${range_critical.Mail:=unknown}

RangeFile[range_important]:
  range: ${range_important.Range:=unknown}
  mail: ${range_important.Mail:=unknown}

Login:
  last: ${Login.Last:=none}
  ${Login.Last}.Success = ${${Login.Last}.Success:=none}
  ${Login.Last}.Failure = ${${Login.Last}.Failure:=none}

Event:
  id: ${Event.Id}
  timestamp: ${Event.Timestamp}
  created: ${Event.TimeCreated}
  hostname: ${Event.Hostname}
  type: ${Event.Type}
  input: ${Event.Input}
  selector: ${Event.Selector}
  address: ${Event.Address}
  port: ${Event.Port}
  username: ${Event.Username}
  domain: ${Event.Domain}
  login: ${Event.Login}
  event: ${Event.EventId}
  machine: ${Event.MachineName}
  recordid: ${Event.RecordId}
  machine: ${Event.MachineName}
  provider: ${Event.ProviderName}
  process: ${Event.ProcessId}

EventData:
  SubjectUserSid: ${EventData.SubjectUserSid}
  SubjectUserName: ${EventData.SubjectUserName}
  SubjectDomainName: ${EventData.SubjectDomainName}
  SubjectLogonId: ${EventData.SubjectLogonId}
  TargetUserSid: ${EventData.TargetUserSid}
  TargetUserName: ${EventData.TargetUserName}
  TargetDomainName: ${EventData.TargetDomainName}
  Status: ${EventData.Status}
  SubStatus: ${EventData.SubStatus}
  FailureReason: ${EventData.FailureReason}
  LogonType: ${EventData.LogonType}
  LogonProcessName: ${EventData.LogonProcessName}
  AuthenticationPackageName: ${EventData.AuthenticationPackageName}
  WorkstationName: ${EventData.WorkstationName}
  TransmittedServices: ${EventData.TransmittedServices}
  LmPackageName: ${EventData.LmPackageName}
  KeyLength: ${EventData.KeyLength}
  ProcessId: ${EventData.ProcessId}
  ProcessName: ${EventData.ProcessName}
  IpAddress: ${EventData.IpAddress}
  IpPort: ${EventData.IpPort}

Expressions:
  simple aritmetic:
    1 + 2 * 3 - 4 = $(1 + 2 * 3 - 4)
    (1 + 2) * 3 - 4 = $((1 + 2) * 3 - 4)
    1 + (2 * 3) - 4 = $(1 + (2 * 3) - 4)
  negation:
    !0 = $(!0)              !1 = $(!1)                  !2 = $(!2)
    !false = $(!false)          !true = $(!true)
    !0 + 1 + !2 + 3 = $(!0 + 1 + !2 + 3)
    0 + !1 + 2 + !3 = $(0 + !1 + 2 + !3)
  comparison:
    0 == 0 = $(0 == 0)          1 == 0 = $(1 == 0)
    0 != 0 = $(0 != 0)          1 != 0 = $(1 != 0)
    0 &gt; 0 = $(0 &gt; 0)           1 &gt; 0 = $(1 &gt; 0)
    0 &gt;= 0 = $(0 &gt;= 0)          1 &gt;= 0 = $(1 &gt;= 0)
    0 &lt; 0 = $(0 &lt; 0)           1 &lt; 0 = $(1 &lt; 0)
    0 &lt;= 0 = $(0 &lt;= 0)          1 &lt;= 0 = $(1 &lt;= 0)
  bitwise operation
    1 | 2 = $(1 | 2)           13 &amp; 10 = $(13 &amp; 10)
    1 || 2 = $(1 || 2)          13 &amp;&amp; 10 = $(13 &amp;&amp; 10)
  typecasting from double to integer
    1.6 = $(1.6)           int(1.6)*2 = $(int(1.6)*2)          bool(0)=$(bool(0))
    1.6*2 = $(1.6*2)         int(1.6*2) = $(int(1.6*2))          bool(123)=$(bool(123))
    7.9 / 4 = $(7.9 / 4)
    int(7.9 / 4) = $(int(7.9 / 4))
    7.9 % 4 = $(7.9 % 4)
  using variables in expressions:
    wintime(${Event.Timestamp}) == unixtime($((${Event.Timestamp} - 621355968000000000) / 10000000:=invalid))
"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <processor name="cmd" type="Cmd">
        <description>Execute command</description>
        <options>
          <option key="path" value="C:\Windows\System32\WindowsPowerShell\v1.0\powershell.EXE"/>
          <option key="args" value="-File c:\F2B\test.ps1 ${EventData.EventID}"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      <!-- Distributed Fail2ban communication module -->
      <!--
      <processor name="action_fail2ban_hard_msmq" type="Fail2banMSMQ">
        <description>Send message to F2BFW service using MSMQ</description>
        <options>
          <option key="queue_name" value=".\private$\F2BProducer"/>
        </options>
        <goto on_error_next="true"/>
      </processor>
      -->
      <!-- Standalone I, II Fail2ban module -->
      <processor name="action_fail2ban_hard_wfp" type="Fail2banWFP">
        <description>Ban IP address reaching fail2ban treshold with local firewall using WFP API (F2BWFP.dll)</description>
        <goto on_error_next="true"/>
      </processor>
      <!-- Standalone III Fail2ban module -->
      <!--
      <processor name="action_fail2ban_hard_fw" type="Fail2banFw">
        <description>Ban IP address reaching fail2ban treshold with local firewall using COM Firewall API (FirewallAPI.dll) ... much slower than WFP</description>
        <goto on_error_next="true"/>
      </processor>
      -->
      <processor name="action_fail2ban_hard_end" type="Stop"/>

      <!--
      Last dummy processor that could serve as label when we want to skip
      evaluation of all remaining processors.
      -->
      <processor name="last" type="Stop"/>

    </processors>

  </f2bSection>

</configuration>
